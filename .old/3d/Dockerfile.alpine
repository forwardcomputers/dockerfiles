FROM python:3-alpine AS build

#### From https://github.com/mainsail-crew/virtual-klipper-printe
RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/community"  >> /etc/apk/repositories \
&&  echo "http://dl-cdn.alpinelinux.org/alpine/edge/main"       >> /etc/apk/repositories \
&&  echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing"    >> /etc/apk/repositories \
&&  apk --update --no-cache add \
    ### non-specific packages
    git \
    swig \
    py3-virtualenv \
    ### klipper
    g++ \
    gcc \
    make \
    patch \
    cmake \
    avr-libc \
    binutils-avr \
    gcc-avr \
    curl-dev \
    libffi-dev \
    openssl-dev \
    python3-dev \
    py3-libgpiod \
    ### clean up
&&  rm -rf /var/cache/apk /var/lib/apk /tmp/* /var/tmp/* 

WORKDIR /opt

#### Klipper
RUN git clone https://github.com/klipper3d/klipper \
&&  rm -rf klipper/.git \
#
&&  python -m venv klippy-env \
&&  klippy-env/bin/pip install -r klipper/scripts/klippy-requirements.txt \
# &&  klippy-env/bin/pip install numpy \
&&  klippy-env/bin/python -m compileall klipper/klippy \
&&  klippy-env/bin/python klipper/klippy/chelper/__init__.py

#### Moonraker
RUN git clone https://github.com/Arksine/moonraker \
&&  rm -rf moonraker/.git \
#
&&  python -m venv moonraker-env \
&&  moonraker-env/bin/pip install -r moonraker/scripts/moonraker-requirements.txt

# #### MJPG-Streamer
# RUN git clone --depth 1 https://github.com/jacksonliam/mjpg-streamer \
#     && cd mjpg-streamer \
#     && cd mjpg-streamer-experimental \
#     && mkdir _build \
#     && cd _build \
#     && cmake -DPLUGIN_INPUT_HTTP=OFF -DPLUGIN_INPUT_UVC=OFF -DPLUGIN_OUTPUT_FILE=OFF -DPLUGIN_OUTPUT_RTSP=OFF -DPLUGIN_OUTPUT_UDP=OFF .. \
#     && cd .. \
#     && make \
#     && rm -rf _build

#### Simulavr

COPY simulavr.config klipper/.config
RUN git clone -b master git://git.savannah.nongnu.org/simulavr.git \
    # Build the firmware
&&  make -C klipper PYTHON=python3 \
&&  mv klipper/out/klipper.elf ./simulavr.elf \
&&  rm -f klipper/.config*.* \
&&  make -C klipper PYTHON=python3 clean \
    # Build simulavr
&&  make CXXFLAGS='-w' -C simulavr cfgclean python build clean

## The run image

FROM python:3-alpine AS run

RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/community"  >> /etc/apk/repositories \
&&  echo "http://dl-cdn.alpinelinux.org/alpine/edge/main"       >> /etc/apk/repositories \
&&  echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing"    >> /etc/apk/repositories \
&&  apk --update --no-cache add \
    openjpeg \
    py3-libgpiod \
    curl \
    libcurl \
    libssl3 \
    lmdb \
    libsodium \
    libjpeg-turbo \
    libtiffxx \
    libxcb \
    zlib \
    iproute2 \
    sudo \
    ### clean up
&&  rm -rf /var/cache/apk /var/lib/apk /tmp/* /var/tmp/* 

COPY --chmod=755 start.sh /bin/start

RUN addgroup printer -S -g 1001 \
&&  adduser printer -S -h /home/printer -G printer -u 1001 \
&&  addgroup printer dialout \
&&  addgroup printer tty \
&&  echo 'printer ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/printer

USER printer
WORKDIR /home/printer

RUN mkdir -p \
    /home/printer/printer_data/gcodes \
    /home/printer/printer_data/logs \
    /home/printer/printer_data/run

# Copy prebuilt applications from the build stage
COPY --from=build --chown=printer:printer /opt/klippy-env ./klippy-env
COPY --from=build --chown=printer:printer /opt/klipper/ ./klipper/
COPY --from=build --chown=printer:printer /opt/moonraker ./moonraker
COPY --from=build --chown=printer:printer /opt/moonraker-env ./moonraker-env
COPY --from=build --chown=printer:printer /opt/simulavr ./simulavr
COPY --from=build --chown=printer:printer /opt/simulavr.elf ./simulavr.elf
# COPY --from=build --chown=printer:printer /build/mjpg-streamer/mjpg-streamer-experimental ./mjpg-streamer

ENTRYPOINT ["/bin/start"]
# ENTRYPOINT ["sleep", "infinity"]
